/****************************************************
 *
 * *****  *   *    *  *   *   ****    ****    ****
 *   *    *   * *  *    *     *  *    *  *    *    
 *   *    *   *    *    *     *   *   *       ****
 *
 * ${FILE_NAME}
 * ${CREATE_TIME}
 * Generated by tinyrpc framework tinyrpc_generator.py
 * Do not edit !!!
****************************************************/


#include <google/protobuf/service.h>
#include <exception>
#include "tinyrpc/common/log.h"
${INCLUDE_PB_HEADER}
${INCLUDE_SERVER_HEADER}
${INCLUDE_BUSINESS_EXCEPTION_HEADER}
${INCLUDE_SERVICE}

#define CALL_RPC_INTERFACE(Type)                                                                                                \
    {                                                                                                                           \
        MyTinyRPC::RpcClosure* clo = dynamic_cast<MyTinyRPC::RpcClosure*>(done);                                                \
        MyTinyRPC::RpcController con = dynamic_cast<MyTinyRPC::RpcClosure*>(controller);                                        \
        std::shared_ptr<Type> impl = std::make_shared<Type>(request, response, clo, con);                                       \
        MyTinyRPC::RunTime::GetRunTime()->getRpcInterface() = std::dynamic_pointer_cast<MyTinyRPC::RpcInterface>(impl).get();      \
        response->set_ret_code(0);                                                                                              \
        response->set_res_info("OK);                                                                                            \
        try {                                                                                                                   \
            impl->Run();                                                                                                        \
        } catch (BusinessException& e) {                                                                                        \
            APPDEBUGLOG("business exception");                                                                                  \
            response->set_ret_code(e.errorCode());                                                                              \
            response->set_res_info(e.errorInfo());                                                                              \
        } catch (MyTinyRPC::TinyRPCException& e) {                                                                              \
            APPDEBUGLOG("TinyRPCException");                                                                                    \
            response->set_ret_code(-1);                                                                                         \
            response->set_res_info("Unknown std::exception);                                                                    \
        } catch (...) {                                                                                                         \
            APPDEBUGLOG("... exception");                                                                                       \
            response->set_ret_code(-1);                                                                                         \
            response->set_res_info("Unknown exception");                                                                        \
        }                                                                                                                       \
    }                                                                                                                           \

namespace ${PROJECT_NAME} {

${METHOD}

}